/**
 * Generated by Gas3 v1.1.0 (Granite Data Services) on Wed Jul 09 04:52:21 CEST 2008.
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERRIDDEN EACH TIME YOU USE
 * THE GENERATOR. CHANGE INSTEAD THE INHERITED CLASS (Booking.as).
 */

package org.jboss.seam.example.booking {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class BookingBase implements IExternalizable {

        protected var _em:IEntityManager = null;

        private var __laziness:String = null;

        private var _address1:String;
        private var _address2:String;
        private var _beds:int;
        private var _checkinDate:Date;
        private var _checkoutDate:Date;
        private var _creditCard:String;
        private var _creditCardExpiryMonth:int;
        private var _creditCardExpiryYear:int;
        private var _creditCardName:String;
        private var _email:String;
        private var _hotel:Hotel;
        private var _id:Number;
        private var _phone:String;
        private var _smoking:Boolean;
        private var _state:String;
        private var _user:User;
        private var _zip:String;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __laziness === null;

            var property:* = this[name];
            return (
                (!(property is Booking) || (property as Booking).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
            _em = em;
        }

        public function meta_mergeVersion(entity:IEntity):void {
            _id = BookingBase(entity).id;
        }

        public function set address1(value:String):void {
            _address1 = value;
        }
        public function get address1():String {
            return _address1;
        }

        public function set address2(value:String):void {
            _address2 = value;
        }
        public function get address2():String {
            return _address2;
        }

        public function set beds(value:int):void {
            _beds = value;
        }
        public function get beds():int {
            return _beds;
        }

        public function set checkinDate(value:Date):void {
            _checkinDate = value;
        }
        public function get checkinDate():Date {
            return _checkinDate;
        }

        public function set checkoutDate(value:Date):void {
            _checkoutDate = value;
        }
        public function get checkoutDate():Date {
            return _checkoutDate;
        }

        public function set creditCard(value:String):void {
            _creditCard = value;
        }
        public function get creditCard():String {
            return _creditCard;
        }

        public function set creditCardExpiryMonth(value:int):void {
            _creditCardExpiryMonth = value;
        }
        public function get creditCardExpiryMonth():int {
            return _creditCardExpiryMonth;
        }

        public function set creditCardExpiryYear(value:int):void {
            _creditCardExpiryYear = value;
        }
        public function get creditCardExpiryYear():int {
            return _creditCardExpiryYear;
        }

        public function set creditCardName(value:String):void {
            _creditCardName = value;
        }
        public function get creditCardName():String {
            return _creditCardName;
        }

        public function set email(value:String):void {
            _email = value;
        }
        public function get email():String {
            return _email;
        }

        public function set hotel(value:Hotel):void {
            _hotel = value;
        }
        public function get hotel():Hotel {
            return _hotel;
        }

        public function set id(value:Number):void {
            _id = value;
        }
        public function get id():Number {
            return _id;
        }

        public function set phone(value:String):void {
            _phone = value;
        }
        public function get phone():String {
            return _phone;
        }

        public function set smoking(value:Boolean):void {
            _smoking = value;
        }
        public function get smoking():Boolean {
            return _smoking;
        }

        public function set state(value:String):void {
            _state = value;
        }
        public function get state():String {
            return _state;
        }

        public function set user(value:User):void {
            _user = value;
        }
        public function get user():User {
            return _user;
        }

        public function set zip(value:String):void {
            _zip = value;
        }
        public function get zip():String {
            return _zip;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
            if (isNaN(_id))
                return "org.jboss.seam.example.booking.Booking";
            return "org.jboss.seam.example.booking.Booking:" + String(_id);
        }

        public function readExternal(input:IDataInput):void {
            __laziness = input.readObject() as String;
            if (meta::isInitialized()) {
                _address1 = input.readObject() as String;
                _address2 = input.readObject() as String;
                _beds = input.readObject() as int;
                _checkinDate = input.readObject() as Date;
                _checkoutDate = input.readObject() as Date;
                _creditCard = input.readObject() as String;
                _creditCardExpiryMonth = input.readObject() as int;
                _creditCardExpiryYear = input.readObject() as int;
                _creditCardName = input.readObject() as String;
                _email = input.readObject() as String;
                _hotel = input.readObject() as Hotel;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _phone = input.readObject() as String;
                _smoking = input.readObject() as Boolean;
                _state = input.readObject() as String;
                _user = input.readObject() as User;
                _zip = input.readObject() as String;
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__laziness);
            if (meta::isInitialized()) {
                if (_address1 is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_address1).object);
                else
                    output.writeObject(_address1);
                if (_address2 is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_address2).object);
                else
                    output.writeObject(_address2);
                if (_beds is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_beds).object);
                else
                    output.writeObject(_beds);
                if (_checkinDate is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_checkinDate).object);
                else
                    output.writeObject(_checkinDate);
                if (_checkoutDate is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_checkoutDate).object);
                else
                    output.writeObject(_checkoutDate);
                if (_creditCard is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_creditCard).object);
                else
                    output.writeObject(_creditCard);
                if (_creditCardExpiryMonth is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_creditCardExpiryMonth).object);
                else
                    output.writeObject(_creditCardExpiryMonth);
                if (_creditCardExpiryYear is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_creditCardExpiryYear).object);
                else
                    output.writeObject(_creditCardExpiryYear);
                if (_creditCardName is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_creditCardName).object);
                else
                    output.writeObject(_creditCardName);
                if (_email is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_email).object);
                else
                    output.writeObject(_email);
                if (_hotel is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_hotel).object);
                else
                    output.writeObject(_hotel);
                if (_id is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_id).object);
                else
                    output.writeObject(_id);
                if (_phone is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_phone).object);
                else
                    output.writeObject(_phone);
                if (_smoking is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_smoking).object);
                else
                    output.writeObject(_smoking);
                if (_state is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_state).object);
                else
                    output.writeObject(_state);
                if (_user is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_user).object);
                else
                    output.writeObject(_user);
                if (_zip is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_zip).object);
                else
                    output.writeObject(_zip);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
