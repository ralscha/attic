<%@ page language="java" import="ch.ess.task.resource.*" isErrorPage="true" %>
<%@ page import="java.util.*, java.io.*" %>
<%@ page import="javax.mail.*, javax.mail.internet.*" %>
<%@ taglib uri="http://jakarta.apache.org/struts/tags-bean" prefix="bean" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jstl/core" %>
<%@ taglib uri="/tags/ess-misc"  prefix="misc" %>
<html><head><title>Task Web Application Error</title>
<html:base/>
<link rel=stylesheet type="text/css" href="<c:url value='/styles/global.css'/>">
</head>

<body bgcolor="White" text="Black" link="Blue" vlink="Purple" alink="Red">
<p>
<bean:message key="Erroroccurred"/><br>
</p>

<p>&nbsp;</p>

<misc:toString id="mailText">
<misc:suppress>
ERROR
<%  //report exception 
    if (exception == null) {
	  exception = (Exception)request.getAttribute("org.apache.struts.action.EXCEPTION");
	}
    if (exception == null) {
	  exception = (Exception)request.getAttribute("javax.servlet.error.exception");
	}
	

  	Throwable rootCause = null;
	if (exception != null) {
  	if (exception instanceof ServletException) { 
		rootCause = ((ServletException)exception).getRootCause();
    }
    
    StringWriter writer = new StringWriter();

	if (rootCause != null) {
		rootCause.printStackTrace(new PrintWriter(writer));		
	} else {	
	      exception.printStackTrace(new PrintWriter(writer));
		}
	
%>
<%= writer.getBuffer() %>
<%	
	}
%>

--------------------------------------
<% //report request %>
REQUEST:
URL: <%= request.getMethod() %> <%= request.getRequestURL() %><% if (request.getQueryString() != null) { %>?<%= request.getQueryString() %><% } %>
Attributes:
<%
 Enumeration names = request.getAttributeNames();
 while(names.hasMoreElements()) {
   String key = (String)names.nextElement(); 
%><%=  key %> = <%= request.getAttribute(key) %>
<% 
 }
%>

--------------------------------------
SESSION:
<% 
StringBuffer sb = new StringBuffer();
String sessionId = request.getRequestedSessionId();
if (sessionId == null) {
  sb.append("none");
} else if (request.isRequestedSessionIdValid()) {
  sb.append(sessionId);
  sb.append(" (from ");
  if (request.isRequestedSessionIdFromCookie())
    sb.append("cookie)\n");
  else if (request.isRequestedSessionIdFromURL())
    sb.append("url)\n");
  else
    sb.append("unknown)\n");
} else {
    sb.append("invalid\n");
}
%>
ID: <%= sb.toString() %>
Attributes:
<%
 names = session.getAttributeNames();
 while(names.hasMoreElements()) {
   String key = (String)names.nextElement(); 
%><%=  key %> = <%= session.getAttribute(key) %>
<% 
 }
%>

--------------------------------------
<% //report parameters %>
PARAMETERS:
<%
names = request.getParameterNames();
if (names.hasMoreElements()) {
  while (names.hasMoreElements()) {
    String name = (String) names.nextElement();
    String[] values = request.getParameterValues(name);
    for (int i = 0; i < values.length; ++i) {
%><%= name %> = <%= values[i] %>
<%	
    }
  }
} 
%>
--------------------------------------
<% //report headers %>
HEADERS:
<%
names = request.getHeaderNames();
if (names != null) {
if (names.hasMoreElements()) {
  while (names.hasMoreElements()) {
    String name = (String) names.nextElement();
    String value = (String) request.getHeader(name);
%><%= name %> = <%= value %>
<%
  }
}
}
%>
--------------------------------------
<% // report cookies %>
COOKIES:
<%
    Cookie[] cookies = request.getCookies();
	if (cookies != null) {
    int l = cookies.length;
    if (l > 0) {
      for (int i = 0; i < l; ++i) {
        Cookie cookie = cookies[i];
%><%= cookie.getName() %> = <%= cookie.getValue() %>
<%    } 
    } 
    } %>
--------------------------------------
USER:
<%  if (request.getUserPrincipal() != null) { %>
<%=   request.getUserPrincipal().getName() %>
<% } %>

</misc:suppress>
</misc:toString>

<% try {
     String mailServer = AppConfig.getStringProperty(AppConfig.MAIL_SMTPHOST, null);
     String subject = "ContractTracker Error Notification";
     String [] to = { AppConfig.getStringProperty(AppConfig.ERROR_MAIL_RECEIVER, null) };
     String from = AppConfig.getStringProperty(AppConfig.MAIL_SENDER, null);
     sendEmail(mailServer, subject, to, from, mailText); %>
     <p><b>Sent an email to: <%= to[0] %></b></p>
<% }
   catch (AddressException e) { %>
     <p>Invalid e-mail address(es) for error notification. <%= e.toString() %></p>
<% }
   catch (MessagingException e) { %>
     <p>Unable to send e-mail for error notification. <%= e.toString() %></p>
<% } %>

</body>
</html>
<%!  
  public void sendEmail (String mailServer, String subject,
                         String to[], String from, String messageText) 
    throws AddressException, MessagingException {
    
	// Create session
    Properties mailProps = new Properties();
    mailProps.put("mail.smtp.host", mailServer);
    //mailProps.put("mail.debug", Boolean.TRUE);
    Session mailSession = Session.getDefaultInstance(mailProps, null);
    //mailSession.setDebug(true);
    // Construct addresses
    int toCount = to.length;
    InternetAddress[] toAddrs = new InternetAddress[toCount];
    for (int i = 0; i < toCount; ++i) {
        toAddrs[i] = new InternetAddress(to[i]);
    }
    InternetAddress fromAddr = new InternetAddress(from);
    // Create and initialize message
    Message message = new MimeMessage(mailSession);
    message.setFrom(fromAddr);
    message.setRecipients(Message.RecipientType.TO, toAddrs);
    message.setSubject(subject);
    message.setContent(messageText.toString(), "text/plain");
    // Send message
    Transport.send(message);
	
  } %>
