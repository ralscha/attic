/**
 * Generated by Gas3 v1.1.0 (Granite Data Services) on Wed Jul 16 16:57:30 CEST 2008.
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERRIDDEN EACH TIME YOU USE
 * THE GENERATOR. CHANGE INSTEAD THE INHERITED CLASS (Changelog.as).
 */

package ch.ess.issue.entity {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import org.granite.meta;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class ChangelogBase extends AbstractEntity {

        private var _changeDate:Date;
        private var _field:String;
        private var _issue:Issue;
        private var _newValue:String;
        private var _oldValue:String;
        private var _user:User;

        public function set changeDate(value:Date):void {
            _changeDate = value;
        }
        public function get changeDate():Date {
            return _changeDate;
        }

        public function set field(value:String):void {
            _field = value;
        }
        public function get field():String {
            return _field;
        }

        public function set issue(value:Issue):void {
            _issue = value;
        }
        public function get issue():Issue {
            return _issue;
        }

        public function set newValue(value:String):void {
            _newValue = value;
        }
        public function get newValue():String {
            return _newValue;
        }

        public function set oldValue(value:String):void {
            _oldValue = value;
        }
        public function get oldValue():String {
            return _oldValue;
        }

        public function set user(value:User):void {
            _user = value;
        }
        public function get user():User {
            return _user;
        }

        override public function readExternal(input:IDataInput):void {
            super.readExternal(input);
            if (meta::isInitialized()) {
                _changeDate = input.readObject() as Date;
                _field = input.readObject() as String;
                _issue = input.readObject() as Issue;
                _newValue = input.readObject() as String;
                _oldValue = input.readObject() as String;
                _user = input.readObject() as User;
            }
        }

        override public function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            if (meta::isInitialized()) {
                if (_changeDate is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_changeDate).object);
                else
                    output.writeObject(_changeDate);
                if (_field is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_field).object);
                else
                    output.writeObject(_field);
                if (_issue is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_issue).object);
                else
                    output.writeObject(_issue);
                if (_newValue is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_newValue).object);
                else
                    output.writeObject(_newValue);
                if (_oldValue is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_oldValue).object);
                else
                    output.writeObject(_oldValue);
                if (_user is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_user).object);
                else
                    output.writeObject(_user);
            }
        }
    }
}
