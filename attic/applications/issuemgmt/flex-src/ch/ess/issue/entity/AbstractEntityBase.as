/**
 * Generated by Gas3 v1.1.0 (Granite Data Services) on Wed Jul 16 16:57:30 CEST 2008.
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERRIDDEN EACH TIME YOU USE
 * THE GENERATOR. CHANGE INSTEAD THE INHERITED CLASS (AbstractEntity.as).
 */

package ch.ess.issue.entity {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import mx.core.IUID;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class AbstractEntityBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __laziness:String = null;

        private var _id:Number;
        private var _uid:String;
        private var _version:Number;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __laziness === null;

            var property:* = this[name];
            return (
                (!(property is AbstractEntity) || (property as AbstractEntity).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
            _em = em;
        }

        public function meta_mergeVersion(entity:IEntity):void {
            _id = AbstractEntityBase(entity).id;
            _version = AbstractEntityBase(entity).version;
        }

        public function get id():Number {
            return _id;
        }

        public function set uid(value:String):void {
            _uid = value;
        }
        public function get uid():String {
            return _uid;
        }

        public function get version():Number {
            return _version;
        }

        public function readExternal(input:IDataInput):void {
            __laziness = input.readObject() as String;
            if (meta::isInitialized()) {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _uid = input.readObject() as String;
                _version = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__laziness);
            if (meta::isInitialized()) {
                if (_id is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_id).object);
                else
                    output.writeObject(_id);
                if (_uid is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_uid).object);
                else
                    output.writeObject(_uid);
                if (_version is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_version).object);
                else
                    output.writeObject(_version);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
