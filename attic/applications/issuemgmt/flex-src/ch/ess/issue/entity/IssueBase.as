/**
 * Generated by Gas3 v1.1.0 (Granite Data Services) on Wed Jul 16 16:57:30 CEST 2008.
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERRIDDEN EACH TIME YOU USE
 * THE GENERATOR. CHANGE INSTEAD THE INHERITED CLASS (Issue.as).
 */

package ch.ess.issue.entity {

    import ch.ess.issue.enums.IssueStatus;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import org.granite.meta;
    import org.granite.tide.IPropertyHolder;
    import org.granite.util.Enum;

    use namespace meta;

    [Managed]
    public class IssueBase extends AbstractEntity {

        private var _assignee:User;
        private var _changeDate:Date;
        private var _component:Component;
        private var _createDate:Date;
        private var _description:String;
        private var _priorityLevel:PriorityLevel;
        private var _reporter:User;
        private var _resolution:Resolution;
        private var _status:IssueStatus;
        private var _summary:String;
        private var _type:IssueType;

        public function set assignee(value:User):void {
            _assignee = value;
        }
        public function get assignee():User {
            return _assignee;
        }

        public function set changeDate(value:Date):void {
            _changeDate = value;
        }
        public function get changeDate():Date {
            return _changeDate;
        }

        public function set component(value:Component):void {
            _component = value;
        }
        public function get component():Component {
            return _component;
        }

        public function set createDate(value:Date):void {
            _createDate = value;
        }
        public function get createDate():Date {
            return _createDate;
        }

        public function set description(value:String):void {
            _description = value;
        }
        public function get description():String {
            return _description;
        }

        public function set priorityLevel(value:PriorityLevel):void {
            _priorityLevel = value;
        }
        public function get priorityLevel():PriorityLevel {
            return _priorityLevel;
        }

        public function set reporter(value:User):void {
            _reporter = value;
        }
        public function get reporter():User {
            return _reporter;
        }

        public function set resolution(value:Resolution):void {
            _resolution = value;
        }
        public function get resolution():Resolution {
            return _resolution;
        }

        public function set status(value:IssueStatus):void {
            _status = value;
        }
        public function get status():IssueStatus {
            return _status;
        }

        public function set summary(value:String):void {
            _summary = value;
        }
        public function get summary():String {
            return _summary;
        }

        public function set type(value:IssueType):void {
            _type = value;
        }
        public function get type():IssueType {
            return _type;
        }

        override public function readExternal(input:IDataInput):void {
            super.readExternal(input);
            if (meta::isInitialized()) {
                _assignee = input.readObject() as User;
                _changeDate = input.readObject() as Date;
                _component = input.readObject() as Component;
                _createDate = input.readObject() as Date;
                _description = input.readObject() as String;
                _priorityLevel = input.readObject() as PriorityLevel;
                _reporter = input.readObject() as User;
                _resolution = input.readObject() as Resolution;
                _status = Enum.readEnum(input) as IssueStatus;
                _summary = input.readObject() as String;
                _type = input.readObject() as IssueType;
            }
        }

        override public function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            if (meta::isInitialized()) {
                if (_assignee is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_assignee).object);
                else
                    output.writeObject(_assignee);
                if (_changeDate is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_changeDate).object);
                else
                    output.writeObject(_changeDate);
                if (_component is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_component).object);
                else
                    output.writeObject(_component);
                if (_createDate is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_createDate).object);
                else
                    output.writeObject(_createDate);
                if (_description is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_description).object);
                else
                    output.writeObject(_description);
                if (_priorityLevel is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_priorityLevel).object);
                else
                    output.writeObject(_priorityLevel);
                if (_reporter is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_reporter).object);
                else
                    output.writeObject(_reporter);
                if (_resolution is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_resolution).object);
                else
                    output.writeObject(_resolution);
                if (_status is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_status).object);
                else
                    output.writeObject(_status);
                if (_summary is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_summary).object);
                else
                    output.writeObject(_summary);
                if (_type is IPropertyHolder)
                    output.writeObject(IPropertyHolder(_type).object);
                else
                    output.writeObject(_type);
            }
        }
    }
}
