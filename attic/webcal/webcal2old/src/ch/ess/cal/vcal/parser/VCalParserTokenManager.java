/* Generated By:JavaCC: Do not edit this line. VCalParserTokenManager.java */
package ch.ess.cal.vcal.parser;

public class VCalParserTokenManager implements VCalParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 11;
            return -1;
         }
         if ((active0 & 0xffffffffffff003eL) != 0L || (active1 & 0xfffffffffffL) != 0L)
         {
            jjmatchedKind = 9;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xffffffffffff003eL) != 0L || (active1 & 0xfffffffffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0xffeffffffff7003eL) != 0L || (active1 & 0xf7fffffffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0xffe3ffdfffd5003aL) != 0L || (active1 & 0xe3fbbfffeffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0xffe3fbdfffd5003aL) != 0L || (active1 & 0xe3e393deeffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0xffe3db9fded50018L) != 0L || (active1 & 0xe2e3139eebfL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x7fe1db1e40910008L) != 0L || (active1 & 0xe2a2039ee9dL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x7ce05b1e40810008L) != 0L || (active1 & 0x82a2029ec99L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x54a0111840800008L) != 0L || (active1 & 0x80a20016888L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x5420111000800000L) != 0L || (active1 & 0x220000808L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4420011000000000L) != 0L || (active1 & 0x200000808L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x4400010000000000L) != 0L || (active1 & 0x200000808L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x4400010000000000L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}

private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 49:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 55:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 56:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 58:
         return jjStopAtPos(0, 6);
      case 59:
         return jjStopAtPos(0, 7);
      case 61:
         return jjStopAtPos(0, 8);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20000300400000L, 0x400L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x40000000000002L, 0x400000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x801800000L, 0x60104038L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x807402010000L, 0x2000018000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x80008004000004L, 0x1080040L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80010000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x200000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x600000008000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000800L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x1800080010040000L, 0x4000086L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x340060000000L, 0x60000c00000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x6001400080000000L, 0x1000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x8002000000080000L, 0x22000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x100038L, 0x8040301L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 45:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1001ac10000L, active1, 0x402240051L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180000000L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000008L, active1, 0xc000500L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000020000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00501040120012L, active1, 0x6600001ba00L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x100020L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x2408000000000000L, active1, 0x40000000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000004L, active1, 0x10080000L);
      case 79:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         return jjMoveStringLiteralDfa2_0(active0, 0x100020800000000L, active1, 0x20404008L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x8006280000040000L, active1, 0x800000084L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x804380000020L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x41002000000000L, active1, 0x200000002L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x8004000000L, active1, 0x1000000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000020000L);
      case 90:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x80020000a1000008L, active1, 0x8100020L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000020000000000L, active1, 0x88401L);
      case 68:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(2, 2);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x4200004000000000L, active1, 0x800L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L, active1, 0x800000000L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 73:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 104);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x180000004L);
      case 76:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x10010001a400000L, active1, 0x2010450000L);
      case 77:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 90);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000000L, active1, 0x80000000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1020207008L);
      case 79:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(2, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000040020L, active1, 0x200000080L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x1020000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x60000000000L);
      case 82:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(2, 72);
         return jjMoveStringLiteralDfa3_0(active0, 0x800008400100000L, active1, 0L);
      case 83:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 102);
         return jjMoveStringLiteralDfa3_0(active0, 0x440811040000000L, active1, 0x400000040L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x300800000L, active1, 0x10L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x80240000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L, active1, 0x2800000L);
      case 89:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x12011e400000L, active1, 0x800000001L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x4480001000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x40020L, active1, 0x800L);
      case 69:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(3, 81);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(3, 86);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0x600800010L, active1, 0x83401010450L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4008L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000000000002L, active1, 0x10000220L);
      case 74:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000010008L, active1, 0x8002L);
      case 77:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002004000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x20080040000000L, active1, 0x80000L);
      case 80:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(3, 87);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8100000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000001100000L, active1, 0L);
      case 84:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(3, 76);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0x2008100a0000000L, active1, 0x220002000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x408000000000L, active1, 0x60000040000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x81800400000000L, active1, 0x2004L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x1000200L);
      case 68:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 91);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0x80000080000L);
      case 69:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(4, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x9400400000000008L, active1, 0x40220000080L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x2000010000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x4220000000150000L, active1, 0x2000000c00aL);
      case 76:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(4, 70);
         return jjMoveStringLiteralDfa5_0(active0, 0x8800000000L, active1, 0L);
      case 78:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(4, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000200000010L, active1, 0x810000000L);
      case 79:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(4, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 82:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 100);
         return jjMoveStringLiteralDfa5_0(active0, 0x8101a400000L, active1, 0x30L);
      case 83:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 24);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x100800L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x120004000000L, active1, 0x1L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x800L);
      case 52:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(5, 98);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x4100000000000000L, active1, 0x2000210000L);
      case 67:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(5, 65);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 68:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000200000000L, active1, 0x200000008L);
      case 69:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 26);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 39);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 92);
         return jjMoveStringLiteralDfa6_0(active0, 0x40100800000000L, active1, 0x100000L);
      case 71:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 72:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(5, 32);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0xa1000000000L, active1, 0x80800080011L);
      case 76:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(5, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x200L);
      case 77:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0xa20400000000008L, active1, 0x20008000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x900000L, active1, 0L);
      case 80:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 49);
         break;
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800040000000L, active1, 0x20000004000L);
      case 83:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(5, 31);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(5, 69);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L);
      case 84:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(5, 4);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 88);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000400000000L, active1, 0x2404L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x2800000000000000L, active1, 0x80000000800L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000400040000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000008L, active1, 0L);
      case 69:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(6, 66);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(6, 73);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 105);
         return jjMoveStringLiteralDfa7_0(active0, 0x600000000L, active1, 0x8408L);
      case 71:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(6, 57);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x2000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x4400000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000L);
      case 78:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(6, 20);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80010L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x30000000000L, active1, 0x1L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 47);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(6, 84);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0x20080800000000L, active1, 0x2020010080L);
      case 89:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 48);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(6, 56);
         break;
      case 90:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0x20000000L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000000000008L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
      case 68:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 34);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(7, 74);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(7, 79);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 33);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(7, 46);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(7, 85);
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x840000000L, active1, 0x800014000L);
      case 71:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(7, 68);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(7, 83);
         break;
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
      case 76:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(7, 59);
         break;
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(7, 41);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(7, 64);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0x80L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000L);
      case 83:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(7, 54);
         break;
      case 84:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0x80000000000L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000L);
      case 89:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(7, 43);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(7, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(8, 35);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(8, 78);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(8, 80);
         break;
      case 69:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(8, 77);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 107);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000800000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x11000000000L, active1, 0x20000000L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(8, 55);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(8, 3);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(8, 71);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(8, 99);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000L);
      case 83:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(8, 30);
         break;
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0x808L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 68:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(9, 93);
         break;
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000808L);
      case 76:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(9, 60);
         break;
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L);
      case 79:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(9, 44);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(9, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(10, 36);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L, active1, 0x800L);
      case 84:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(10, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0L);
      case 76:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(11, 67);
         break;
      case 78:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(11, 75);
         break;
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000L);
      case 68:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(12, 40);
         break;
      case 83:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(12, 58);
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000000L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200000000L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(15, 97);
         break;
      case 78:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(15, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if ((0xf7ffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if ((0xdbffafffffffffffL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 2:
                  if ((0x100002600L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 3:
                  if ((0xdbffafffffffffffL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 13)
                     kind = 13;
                  if (kind > 9)
                     kind = 9;
                  if ((0xffffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  break;
               case 3:
                  if ((0xffffffffd7ffffffL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 4:
                  if (kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
public static final String[] jjstrLiteralImages = {
"", "\102\105\107\111\116", "\105\116\104", 
"\126\103\101\114\105\116\104\101\122", "\126\105\126\105\116\124", "\126\124\117\104\117", "\72", "\73", "\75", null, 
null, null, null, null, null, "\15\12", "\104\101\131\114\111\107\110\124", 
"\107\105\117", "\120\122\117\104\111\104", "\124\132", "\126\105\122\123\111\117\116", 
"\61\56\60", "\101\101\114\101\122\115", "\103\101\124\105\107\117\122\111\105\123", 
"\103\114\101\123\123", "\104\101\114\101\122\115", "\105\130\104\101\124\105", 
"\115\101\114\101\122\115", "\120\101\114\101\122\115", "\122\104\101\124\105", 
"\122\105\123\117\125\122\103\105\123", "\123\124\101\124\125\123", "\101\124\124\101\103\110", 
"\101\124\124\105\116\104\105\105", "\104\103\122\105\101\124\105\104", "\103\117\115\120\114\105\124\105\104", 
"\104\105\123\103\122\111\120\124\111\117\116", "\104\125\105", "\104\124\105\116\104", "\105\130\122\125\114\105", 
"\114\101\123\124\55\115\117\104\111\106\111\105\104", "\114\117\103\101\124\111\117\116", "\122\116\125\115", 
"\120\122\111\117\122\111\124\131", "\122\105\114\101\124\105\104\55\124\117", "\122\122\125\114\105", 
"\123\105\121\125\105\116\103\105", "\104\124\123\124\101\122\124", "\123\125\115\115\101\122\131", 
"\124\122\101\116\123\120", "\125\122\114", "\125\111\104", "\130\55", 
"\101\120\120\117\111\116\124\115\105\116\124", "\102\125\123\111\116\105\123\123", "\105\104\125\103\101\124\111\117\116", 
"\110\117\114\111\104\101\131", "\115\105\105\124\111\116\107", 
"\115\111\123\103\105\114\114\101\116\105\117\125\123", "\120\105\122\123\117\116\101\114", "\120\110\117\116\105\40\103\101\114\114", 
"\123\111\103\113\40\104\101\131", "\123\120\105\103\111\101\114\40\117\103\103\101\123\111\117\116", 
"\124\122\101\126\105\114", "\126\101\103\101\124\111\117\116", "\120\125\102\114\111\103", 
"\120\122\111\126\101\124\105", "\103\117\116\106\111\104\105\116\124\111\101\114", 
"\103\101\124\105\122\111\116\107", "\103\110\101\111\122\123", "\105\101\123\105\114", 
"\120\122\117\112\105\103\124\117\122", "\126\103\122", "\126\105\110\111\103\114\105", 
"\101\103\103\105\120\124\105\104", "\116\105\105\104\123\40\101\103\124\111\117\116", "\123\105\116\124", 
"\124\105\116\124\101\124\111\126\105", "\103\117\116\106\111\122\115\105\104", "\104\105\103\114\111\116\105\104", 
"\104\105\114\105\107\101\124\105\104", "\124\131\120\105", "\126\101\114\125\105", 
"\105\116\103\117\104\111\116\107", "\103\110\101\122\123\105\124", "\114\101\116\107\125\101\107\105", 
"\122\117\114\105", "\122\123\126\120", "\105\130\120\105\103\124", "\127\101\126\105", 
"\120\103\115", "\126\103\101\122\104", "\111\116\114\111\116\105", 
"\103\117\116\124\105\116\124\55\111\104", "\103\111\104", "\67\102\111\124", "\70\102\111\124", 
"\121\125\117\124\105\104\55\120\122\111\116\124\101\102\114\105", "\102\101\123\105\66\64", "\117\122\107\101\116\111\132\105\122", 
"\117\127\116\105\122", "\104\105\114\105\107\101\124\105", "\131\105\123", "\116\117", 
"\106\131\111", "\122\105\121\125\111\122\105", "\122\105\121\125\105\123\124", 
"\111\115\115\105\104\111\101\124\105", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[5];
private final int[] jjstateSet = new int[10];
protected char curChar;
public VCalParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public VCalParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 5; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 14)
   {
      jjmatchedKind = 14;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
