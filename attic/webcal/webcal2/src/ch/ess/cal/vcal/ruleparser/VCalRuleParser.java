/* Generated By:JavaCC: Do not edit this line. VCalRuleParser.java */
  package ch.ess.cal.vcal.ruleparser;
  import java.io.Reader;
import java.io.StringReader;
  public class VCalRuleParser implements VCalRuleParserConstants {

    public static String getICalRule(String rule) throws ParseException, TokenMgrError {
      Reader reader = new StringReader(rule);
      VCalRuleParser r = new VCalRuleParser(reader);
      return r.parse();
    }

  final public String parse() throws ParseException {
String t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      t = daily();
      break;
    case 14:
      t = weekly();
      break;
    case 15:
      t = monthlyPos();
      break;
    case 16:
      t = monthlyDay();
      break;
    case 17:
      t = yearlyMonth();
      break;
    case 18:
      t = yearlyDay();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String daily() throws ParseException {
  StringBuffer sb = new StringBuffer(50);
  Token t = null;
  sb.append("FREQ=DAILY;");
    jj_consume_token(13);
    t = jj_consume_token(DIGITS);
               sb.append("INTERVAL=").append(t.image).append(";");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASH:
      jj_consume_token(HASH);
      t = jj_consume_token(DIGITS);
                       sb.append("COUNT=").append(t.image).append(";");
      break;
    default:
      jj_la1[1] = jj_gen;
      
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDDATE:
      t = jj_consume_token(ENDDATE);
                 sb.append("UNTIL=").append(t.image).append(";");
      break;
    default:
      jj_la1[2] = jj_gen;
      
    }
  {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String weekly() throws ParseException {
  StringBuffer sb = new StringBuffer(50);
  Token t = null;
  sb.append("FREQ=WEEKLY;");
    jj_consume_token(14);
    t = jj_consume_token(DIGITS);
               sb.append("INTERVAL=").append(t.image).append(";");
   String w = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WEEKDAY:
        
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      t = jj_consume_token(WEEKDAY);
                if (w.length() > 0) w += ","; w += t.image;
    }
   if (w.length() > 0) sb.append("BYDAY=").append(w).append(";");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASH:
      jj_consume_token(HASH);
      t = jj_consume_token(DIGITS);
                       sb.append("COUNT=").append(t.image).append(";");
      break;
    default:
      jj_la1[4] = jj_gen;
      
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDDATE:
      t = jj_consume_token(ENDDATE);
                 sb.append("UNTIL=").append(t.image).append(";");
      break;
    default:
      jj_la1[5] = jj_gen;
      
    }
  {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String monthlyPos() throws ParseException {
  StringBuffer sb = new StringBuffer(50);
  Token t = null;
  Token minus = null;
  sb.append("FREQ=MONTHLY;");
    jj_consume_token(15);
    t = jj_consume_token(DIGITS);
               sb.append("INTERVAL=").append(t.image).append(";");
   String m = "";
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
     String occ = "";
      t = jj_consume_token(DIGITS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        minus = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     if (minus != null) {occ+="-"; minus=null;} occ += t.image;
      label_3:
      while (true) {
        t = jj_consume_token(WEEKDAY);
                 if (m.length() > 0) m += ",";m += occ; m+=t.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WEEKDAY:
          
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
      }
    }
   if (m.length() > 0) sb.append("BYDAY=").append(m).append(";");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASH:
      jj_consume_token(HASH);
      t = jj_consume_token(DIGITS);
                       sb.append("COUNT=").append(t.image).append(";");
      break;
    default:
      jj_la1[9] = jj_gen;
      
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDDATE:
      t = jj_consume_token(ENDDATE);
                 sb.append("UNTIL=").append(t.image).append(";");
      break;
    default:
      jj_la1[10] = jj_gen;
      
    }
  {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String monthlyDay() throws ParseException {
  StringBuffer sb = new StringBuffer(50);
  Token t = null;
  Token minus = null;
  sb.append("FREQ=MONTHLY;");
    jj_consume_token(16);
    t = jj_consume_token(DIGITS);
               sb.append("INTERVAL=").append(t.image).append(";");
   String m = "";
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
      case LASTDAY:
        
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LASTDAY:
        jj_consume_token(LASTDAY);
               if (m.length() > 0) m += ","; m += "-1";
        break;
      case DIGITS:
        t = jj_consume_token(DIGITS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
            jj_consume_token(PLUS);
            break;
          case MINUS:
            minus = jj_consume_token(MINUS);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          
        }
     if (m.length() > 0) m += ","; if (minus != null) {m+="-"; minus=null;} m += t.image;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   if (m.length() > 0) sb.append("BYMONTHDAY=").append(m).append(";");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASH:
      jj_consume_token(HASH);
      t = jj_consume_token(DIGITS);
                       sb.append("COUNT=").append(t.image).append(";");
      break;
    default:
      jj_la1[15] = jj_gen;
      
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDDATE:
      t = jj_consume_token(ENDDATE);
                 sb.append("UNTIL=").append(t.image).append(";");
      break;
    default:
      jj_la1[16] = jj_gen;
      
    }
  {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String yearlyMonth() throws ParseException {
  StringBuffer sb = new StringBuffer(50);
  Token t = null;
  sb.append("FREQ=YEARLY;");
    jj_consume_token(17);
    t = jj_consume_token(DIGITS);
               sb.append("INTERVAL=").append(t.image).append(";");
   String m = "";
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(DIGITS);
               if (m.length() > 0) m += ","; m += t.image;
    }
   if (m.length() > 0) sb.append("BYMONTH=").append(m).append(";");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASH:
      jj_consume_token(HASH);
      t = jj_consume_token(DIGITS);
                       sb.append("COUNT=").append(t.image).append(";");
      break;
    default:
      jj_la1[18] = jj_gen;
      
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDDATE:
      t = jj_consume_token(ENDDATE);
                 sb.append("UNTIL=").append(t.image).append(";");
      break;
    default:
      jj_la1[19] = jj_gen;
      
    }
  {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String yearlyDay() throws ParseException {
  StringBuffer sb = new StringBuffer(50);
  Token t = null;
  sb.append("FREQ=YEARLY;");
    jj_consume_token(18);
    t = jj_consume_token(DIGITS);
               sb.append("INTERVAL=").append(t.image).append(";");
   String d = "";
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(DIGITS);
               if (d.length() > 0) d += ","; d += t.image;
    }
   if (d.length() > 0) sb.append("BYYEARDAY=").append(d).append(";");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASH:
      jj_consume_token(HASH);
      t = jj_consume_token(DIGITS);
                       sb.append("COUNT=").append(t.image).append(";");
      break;
    default:
      jj_la1[21] = jj_gen;
      
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDDATE:
      t = jj_consume_token(ENDDATE);
                 sb.append("UNTIL=").append(t.image).append(";");
      break;
    default:
      jj_la1[22] = jj_gen;
      
    }
  {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  public VCalRuleParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7e000,0x400,0x200,0x800,0x400,0x200,0x40,0x180,0x800,0x400,0x200,0x1040,0x180,0x180,0x1040,0x400,0x200,0x40,0x400,0x200,0x40,0x400,0x200,};
   }

  public VCalRuleParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VCalRuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public VCalRuleParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VCalRuleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public VCalRuleParser(VCalRuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  public void ReInit(VCalRuleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[19];
    for (int i = 0; i < 19; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
    //no action
  }

  final public void disable_tracing() {
    //no action
  }

  }
