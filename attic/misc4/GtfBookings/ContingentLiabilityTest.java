/**
 * Class ContingentLiabilityTest.java 
 * 
 * This program is a front-end tool to modify the 'contingent_liability' 
 * table. It currently supports LIST, INSERT, and DELETE functions. 
 * The general rule to run the program looks like this: 
 * 
 * 1. java progname list <condition> <orderby> 
 * 2. java progname insert <field1> <field2> ... <fieldN> 
 * 3. java progname delete <keyfield1> <keyfield2> ... <keyfieldN> 
 * 
 * NOTE: Make sure you modify the JDBC Driver and URL variables 
 * before you try this program. 
 * 
 * Generated by: DbGen Professional Edition Version 1.0b2 
 * Generated on: 4/17/98 8:39 PM 
 */

import java.sql.*;
import com.twolink.dbgen.support.*;

public class ContingentLiabilityTest {
	public static void main(String args[]) {
		try {
		  // -- Select the right driver and url -- 
		  //String drv = "sun.jdbc.odbc.JdbcOdbcDriver";
		  //String url = "jdbc:odbc:dsn";
		  String drv = "com.imaginary.sql.msql.MsqlDriver";
		  String url = "jdbc:msql://host:port/database";
		  com.twolink.dbgen.support.DbAccess dba = new com.twolink.dbgen.support.DbAccess(drv, url, "username", "password");
		  com.twolink.dbgen.support.Driver driver = new com.twolink.dbgen.support.Driver(dba);
		  dba.setDebug(true); // Set to TRUE for verbose SQL inspection
		  if (args[0].equalsIgnoreCase("insert")) {
		    insert(driver, args);
		  } else if (args[0].equalsIgnoreCase("delete")) {
		    delete(driver, args);
		  } else if (args[0].equalsIgnoreCase("list")) {
		    list(driver, args);
		  }
		} catch (Exception e) {
		  e.printStackTrace();
		}
	}
	
	private static void insert(com.twolink.dbgen.support.Driver driver, String args[])
	  throws SQLException
	{
	  ContingentLiability obj = new ContingentLiability(Integer.parseInt(args[1]), args[2], Integer.parseInt(args[3]), args[4], parseDouble(args[5]), args[6], args[7], java.sql.Date.valueOf(args[8]), parseDouble(args[9]), args[10], args[11], args[12], args[13], args[14]);
	  driver.insert(obj);
	}
	
	private static void delete(com.twolink.dbgen.support.Driver driver, String args[])
	  throws SQLException
	{
	  ContingentLiability obj = new ContingentLiability(Integer.parseInt(args[1]));
	  driver.delete(obj);
	}
	
	private static void list(com.twolink.dbgen.support.Driver driver, String args[])
	  throws SQLException
	{
	  ContingentLiability holder = new ContingentLiability();
	  ResultSet rs = driver.query(holder, args[1], args[2]);
	  ContingentLiability obj;
	  int i = 0;
	  while ((obj = (ContingentLiability) driver.getNextRecord(holder, rs)) != null) {
	    System.out.println((++i) + "." + obj.toString());
	  }
	}
	
	private static float parseFloat(String s)
	{
	  float f = (float) 0.0;
	  try {
	    f = Float.valueOf(s).floatValue();
	  } catch (NumberFormatException e) {
	    e.printStackTrace();
	  }
	  return f;
	}
	
	private static double parseDouble(String s)
	{
	  double f = 0.0;
	  try {
	    f = Double.valueOf(s).doubleValue();
	  } catch (NumberFormatException e) {
	    e.printStackTrace();
	  }
	  return f;
	}
	
}
