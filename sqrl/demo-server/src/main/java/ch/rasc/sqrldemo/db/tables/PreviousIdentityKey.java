/*
 * This file is generated by jOOQ.
 */
package ch.rasc.sqrldemo.db.tables;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ch.rasc.sqrldemo.db.DefaultSchema;
import ch.rasc.sqrldemo.db.Indexes;
import ch.rasc.sqrldemo.db.Keys;
import ch.rasc.sqrldemo.db.tables.records.PreviousIdentityKeyRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.12.3" },
		comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PreviousIdentityKey extends TableImpl<PreviousIdentityKeyRecord> {

	private static final long serialVersionUID = 986216830;

	/**
	 * The reference instance of <code>PREVIOUS_IDENTITY_KEY</code>
	 */
	public static final PreviousIdentityKey PREVIOUS_IDENTITY_KEY = new PreviousIdentityKey();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PreviousIdentityKeyRecord> getRecordType() {
		return PreviousIdentityKeyRecord.class;
	}

	/**
	 * The column <code>PREVIOUS_IDENTITY_KEY.PREV_IDENTITY_KEY</code>.
	 */
	public final TableField<PreviousIdentityKeyRecord, String> PREV_IDENTITY_KEY = createField(
			DSL.name("PREV_IDENTITY_KEY"),
			org.jooq.impl.SQLDataType.CHAR(43).nullable(false), this, "");

	/**
	 * The column <code>PREVIOUS_IDENTITY_KEY.APP_USER_ID</code>.
	 */
	public final TableField<PreviousIdentityKeyRecord, Long> APP_USER_ID = createField(
			DSL.name("APP_USER_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false),
			this, "");

	/**
	 * Create a <code>PREVIOUS_IDENTITY_KEY</code> table reference
	 */
	public PreviousIdentityKey() {
		this(DSL.name("PREVIOUS_IDENTITY_KEY"), null);
	}

	/**
	 * Create an aliased <code>PREVIOUS_IDENTITY_KEY</code> table reference
	 */
	public PreviousIdentityKey(String alias) {
		this(DSL.name(alias), PREVIOUS_IDENTITY_KEY);
	}

	/**
	 * Create an aliased <code>PREVIOUS_IDENTITY_KEY</code> table reference
	 */
	public PreviousIdentityKey(Name alias) {
		this(alias, PREVIOUS_IDENTITY_KEY);
	}

	private PreviousIdentityKey(Name alias, Table<PreviousIdentityKeyRecord> aliased) {
		this(alias, aliased, null);
	}

	private PreviousIdentityKey(Name alias, Table<PreviousIdentityKeyRecord> aliased,
			Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""));
	}

	public <O extends Record> PreviousIdentityKey(Table<O> child,
			ForeignKey<O, PreviousIdentityKeyRecord> key) {
		super(child, key, PREVIOUS_IDENTITY_KEY);
	}

	@Override
	public Schema getSchema() {
		return DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_4, Indexes.PRIMARY_KEY_4);
	}

	@Override
	public UniqueKey<PreviousIdentityKeyRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_4;
	}

	@Override
	public List<UniqueKey<PreviousIdentityKeyRecord>> getKeys() {
		return Arrays.<UniqueKey<PreviousIdentityKeyRecord>>asList(Keys.CONSTRAINT_4);
	}

	@Override
	public List<ForeignKey<PreviousIdentityKeyRecord, ?>> getReferences() {
		return Arrays
				.<ForeignKey<PreviousIdentityKeyRecord, ?>>asList(Keys.CONSTRAINT_4C);
	}

	public AppUser appUser() {
		return new AppUser(this, Keys.CONSTRAINT_4C);
	}

	@Override
	public PreviousIdentityKey as(String alias) {
		return new PreviousIdentityKey(DSL.name(alias), this);
	}

	@Override
	public PreviousIdentityKey as(Name alias) {
		return new PreviousIdentityKey(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public PreviousIdentityKey rename(String name) {
		return new PreviousIdentityKey(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public PreviousIdentityKey rename(Name name) {
		return new PreviousIdentityKey(name, null);
	}

	// -------------------------------------------------------------------------
	// Row2 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row2<String, Long> fieldsRow() {
		return (Row2) super.fieldsRow();
	}
}
